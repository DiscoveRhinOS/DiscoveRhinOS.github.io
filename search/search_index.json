{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ROSbloX documentation ROSbloX are modules to discover the Robot Operating System (ROS). Connect with us on Git: ROSbloX Git Join us on Slack: ROSbloX Workspace Follow us on Twitter: ROSbloX (@xploros) Subscribe to our Youtube channel: ROSbloX Youtube Leave feedback in our Google form: ROSbloX Feedback About ROSbloX The Robot Operating System (ROS), https://www.ros.org/ , is rapidly becoming a de facto standard for writing interoperable and reusable robot software. The interoperability and reusability of ROS software come at the price of an increased sofware complexity. Getting started with ROS is complex, especially for developers with backgrounds other than sofware engineering. ROSbloX are modules to explore the functionality of various sensors and actuators and to discover the capabilities of ROS with minimal prior knowledge. Each ROSbloX implements a sensor or an actuator, is equipped with multiple communication interfaces to connect to computers and simple user interfaces, namely a web interface, a python library, and native ROS, to transmit data. The ROSbloX project has just started. We greatly appreciate your inputs through our amazing ROsbloX Feedback form to further develop the project. Available ROSbloX The available ROSbloX are continuously expanded: BloX LIS3DH : Based on Adafruit's LIS3DH Triple-Axis Accelerometer BloX LSM6DSOX-LIS3MDL : Based on Adafruit's LSM6DSOX-LIS3MDL 9-DoF IMU BloX Zed Mini : Based on Stereolab's Zed Mini Mixed-Reality Camera BloX Mosaic-X5 : Based on Septentrio's open source GNSS mosaicHAT BloX micro-ROS : Interfaces with microcontroller via micro-ROS BloX Livox-Mid-70 : Based on Livox's Mid-70 LiDAR BloX Joy-Linux : Use a gamepad connected via Bluetooth ... Contact us to propose novel ROSbloX and to obtain existing ROSbloX!","title":"The ROSbloX documentation"},{"location":"#rosblox-documentation","text":"ROSbloX are modules to discover the Robot Operating System (ROS). Connect with us on Git: ROSbloX Git Join us on Slack: ROSbloX Workspace Follow us on Twitter: ROSbloX (@xploros) Subscribe to our Youtube channel: ROSbloX Youtube Leave feedback in our Google form: ROSbloX Feedback","title":"ROSbloX documentation"},{"location":"#about-rosblox","text":"The Robot Operating System (ROS), https://www.ros.org/ , is rapidly becoming a de facto standard for writing interoperable and reusable robot software. The interoperability and reusability of ROS software come at the price of an increased sofware complexity. Getting started with ROS is complex, especially for developers with backgrounds other than sofware engineering. ROSbloX are modules to explore the functionality of various sensors and actuators and to discover the capabilities of ROS with minimal prior knowledge. Each ROSbloX implements a sensor or an actuator, is equipped with multiple communication interfaces to connect to computers and simple user interfaces, namely a web interface, a python library, and native ROS, to transmit data. The ROSbloX project has just started. We greatly appreciate your inputs through our amazing ROsbloX Feedback form to further develop the project.","title":"About ROSbloX"},{"location":"#available-rosblox","text":"The available ROSbloX are continuously expanded: BloX LIS3DH : Based on Adafruit's LIS3DH Triple-Axis Accelerometer BloX LSM6DSOX-LIS3MDL : Based on Adafruit's LSM6DSOX-LIS3MDL 9-DoF IMU BloX Zed Mini : Based on Stereolab's Zed Mini Mixed-Reality Camera BloX Mosaic-X5 : Based on Septentrio's open source GNSS mosaicHAT BloX micro-ROS : Interfaces with microcontroller via micro-ROS BloX Livox-Mid-70 : Based on Livox's Mid-70 LiDAR BloX Joy-Linux : Use a gamepad connected via Bluetooth ... Contact us to propose novel ROSbloX and to obtain existing ROSbloX!","title":"Available ROSbloX"},{"location":"background/","text":"Further Reading Access to ROSbloX ROSblox are open. Login to a ROSbloX via SSH. Username: rock Password: rock Changing a ROSbloX network configuration The ROSbloX network interfaces are configured in /etc/netplan/01-net.cfg. We refer to netplan.io for further instructions how to modify its network configuration. Updating a ROSbloX The ROSbloX can be updated by executiong docker compose pull in the the main repository in the home folder.","title":"Further Reading"},{"location":"background/#further-reading","text":"","title":"Further Reading"},{"location":"background/#access-to-rosblox","text":"ROSblox are open. Login to a ROSbloX via SSH. Username: rock Password: rock","title":"Access to ROSbloX"},{"location":"background/#changing-a-rosblox-network-configuration","text":"The ROSbloX network interfaces are configured in /etc/netplan/01-net.cfg. We refer to netplan.io for further instructions how to modify its network configuration.","title":"Changing a ROSbloX network configuration"},{"location":"background/#updating-a-rosblox","text":"The ROSbloX can be updated by executiong docker compose pull in the the main repository in the home folder.","title":"Updating a ROSbloX"},{"location":"connection/","text":"Connecting to ROSbloX ROSbloX can be connected to computers which run Windows, MacOS or Linux via USB-C or Ethernet. Note, ROSbloX do not require any installation of ROS on a computer. Connecting to ROSbloX via USB The USB port of a ROSbloX is configured such that it appears to a connecting computer as a network adapter. It runs a DHCP server on the USB interface and automatically assigns an IP address to the connecting computer. When connected via USB, the ROSBloX is accessible via its static IP address, 10.99.11.1 . Connecting to ROSbloX via Ethernet Each ROSbloX's Ethernet interface has two IP addresses assigned to it. One static which is set on the ROSbloX itself and one dynamic which waits for a DHCP lease. Dynamic IP Adress (from a DHCP Server) The dynamic IP address of a ROSbloX is assigned to it by a DHCP server in the network. To access a ROSbloX via its dynamic IP address, the IP address has to retrieved from the DHCP server. Static IP Adress Each ROSbloX ships with the same static IP address, 10.99.1.2 , with subnet mask 255.255.255.0. To access a ROSbloX via their static IP address, ensure the computer's connected Ethernet interface has a static IP address in the same subnet, e.g. 10.99.1.1. Note, this can lead to conflicts if you connect multiple ROSbloX to the same network. See Changing a ROSbloX network configuration , for instructions how to change a ROSbloX network configuration. Checking connectivity Before receiving data from a ROSbloX, ensure that the ROSbloX is connected by pinging it: ping rosblox.local # Resolves correct IP address automatically Some networks prohibit discovery of ROSbloX by their mDNS name, i.e. it cannot be reached via rosblox.local . In that case a ROSbloX can be reached via its IP address: ping 10.99.11.1 # If connected via USB ping 10.99.1.2 # If connected via Ethernet (static IP address) More information on how to use the ping command can be found here . If the ROSbloX is not reachable by either of the commands, the network setup does not work properly. Please leave some feedback in our feedback form: ROSbloX Feedback","title":"Connecting to ROSbloX"},{"location":"connection/#connecting-to-rosblox","text":"ROSbloX can be connected to computers which run Windows, MacOS or Linux via USB-C or Ethernet. Note, ROSbloX do not require any installation of ROS on a computer.","title":"Connecting to ROSbloX"},{"location":"connection/#connecting-to-rosblox-via-usb","text":"The USB port of a ROSbloX is configured such that it appears to a connecting computer as a network adapter. It runs a DHCP server on the USB interface and automatically assigns an IP address to the connecting computer. When connected via USB, the ROSBloX is accessible via its static IP address, 10.99.11.1 .","title":"Connecting to ROSbloX via USB"},{"location":"connection/#connecting-to-rosblox-via-ethernet","text":"Each ROSbloX's Ethernet interface has two IP addresses assigned to it. One static which is set on the ROSbloX itself and one dynamic which waits for a DHCP lease.","title":"Connecting to ROSbloX via Ethernet"},{"location":"connection/#dynamic-ip-adress-from-a-dhcp-server","text":"The dynamic IP address of a ROSbloX is assigned to it by a DHCP server in the network. To access a ROSbloX via its dynamic IP address, the IP address has to retrieved from the DHCP server.","title":"Dynamic IP Adress (from a DHCP Server)"},{"location":"connection/#static-ip-adress","text":"Each ROSbloX ships with the same static IP address, 10.99.1.2 , with subnet mask 255.255.255.0. To access a ROSbloX via their static IP address, ensure the computer's connected Ethernet interface has a static IP address in the same subnet, e.g. 10.99.1.1. Note, this can lead to conflicts if you connect multiple ROSbloX to the same network. See Changing a ROSbloX network configuration , for instructions how to change a ROSbloX network configuration.","title":"Static IP Adress"},{"location":"connection/#checking-connectivity","text":"Before receiving data from a ROSbloX, ensure that the ROSbloX is connected by pinging it: ping rosblox.local # Resolves correct IP address automatically Some networks prohibit discovery of ROSbloX by their mDNS name, i.e. it cannot be reached via rosblox.local . In that case a ROSbloX can be reached via its IP address: ping 10.99.11.1 # If connected via USB ping 10.99.1.2 # If connected via Ethernet (static IP address) More information on how to use the ping command can be found here . If the ROSbloX is not reachable by either of the commands, the network setup does not work properly. Please leave some feedback in our feedback form: ROSbloX Feedback","title":"Checking connectivity"},{"location":"interface/","text":"ROSbloX interfaces Three interfaces are available to transmit data to/from ROSbloX. First, a simple web interface can be used to visualize and/or download data from a ROSbloX. Second, the Python library, roslibpy, which enables data transmission to/from ROSbloX without installing ROS and is easy to integrate in Python scripts. And third, each ROSbloX can be found as ROS node by other ROS nodes in a network. Some networks do not allow the discovery of ROSbloX by their mDNS name, that means a ROSbloX cannot be reached at rosblox.local. In that case their interfaces can be accessed by their IP address's, i.e. 10.99.10.99 if connected via USB and 10.99.12.99 if connected via Ethernet. Web Interface To open a ROSbloX's web interface, a computer requires solely the Chrome browser to be installed. After a ROSbloX has started (which can take up to a minute), its web interface is accessible at http://rosblox.local in your Chrome browser. roslibpy To transmit data to/from a ROSblox in a Python script, the roslibpy can be used. Install the library with pip install roslibpy Afterwards, you can run the following lines in a Python shell to receive data from your ORSbloX. from __future__ import print_function import roslibpy client = roslibpy.Ros(host='rosblox.local', port=9090) client.run() listener = roslibpy.Topic(client, '/topic', 'std_msgs/Float32') listener.subscribe(lambda message: print(message)) try: while True: pass except KeyboardInterrupt: client.terminate() ROS Each ROSbloX can be accessed as normal ROS node, e.g. it shows up when executing ros2 node list ros2 topic list We refer to the official ROS documentation how to communicate with ROS nodes in a network. Further resources and tutorials how to get started with ROS are xxx.","title":"The ROSbloX interfaces"},{"location":"interface/#rosblox-interfaces","text":"Three interfaces are available to transmit data to/from ROSbloX. First, a simple web interface can be used to visualize and/or download data from a ROSbloX. Second, the Python library, roslibpy, which enables data transmission to/from ROSbloX without installing ROS and is easy to integrate in Python scripts. And third, each ROSbloX can be found as ROS node by other ROS nodes in a network. Some networks do not allow the discovery of ROSbloX by their mDNS name, that means a ROSbloX cannot be reached at rosblox.local. In that case their interfaces can be accessed by their IP address's, i.e. 10.99.10.99 if connected via USB and 10.99.12.99 if connected via Ethernet.","title":"ROSbloX interfaces"},{"location":"interface/#web-interface","text":"To open a ROSbloX's web interface, a computer requires solely the Chrome browser to be installed. After a ROSbloX has started (which can take up to a minute), its web interface is accessible at http://rosblox.local in your Chrome browser.","title":"Web Interface"},{"location":"interface/#roslibpy","text":"To transmit data to/from a ROSblox in a Python script, the roslibpy can be used. Install the library with pip install roslibpy Afterwards, you can run the following lines in a Python shell to receive data from your ORSbloX. from __future__ import print_function import roslibpy client = roslibpy.Ros(host='rosblox.local', port=9090) client.run() listener = roslibpy.Topic(client, '/topic', 'std_msgs/Float32') listener.subscribe(lambda message: print(message)) try: while True: pass except KeyboardInterrupt: client.terminate()","title":"roslibpy"},{"location":"interface/#ros","text":"Each ROSbloX can be accessed as normal ROS node, e.g. it shows up when executing ros2 node list ros2 topic list We refer to the official ROS documentation how to communicate with ROS nodes in a network. Further resources and tutorials how to get started with ROS are xxx.","title":"ROS"}]}