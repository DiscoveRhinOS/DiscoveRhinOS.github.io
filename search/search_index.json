{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ROSbloX documentation ROSbloX are modules to discover the Robot Operating System (ROS). Connect with us on Git: ROSbloX Git Join us on Slack: ROSbloX Workspace Follow us on Twitter: ROSbloX (@xploros) Subscribe to our Youtube channel: ROSbloX Youtube Leave some feedback/ideas/questions: ROSbloX Discussions We greatly appreciate your engagement! About ROSbloX The Robot Operating System (ROS), https://www.ros.org/ , is rapidly becoming a de facto standard for writing interoperable and reusable robot software. The interoperability and reusability of ROS software come at the price of an increased software complexity. Getting started with ROS is complex, especially for developers with no backgrounds in software engineering. ROSbloX are modules to explore the functionalities of various sensors and actuators and to discover the capabilities of ROS with minimal prior knowledge. Each ROSbloX implements a sensor or an actuator, is equipped with multiple communication interfaces to connect to computers and simple user interfaces, namely a web interface, a python library, and native ROS, to transmit data. Available ROSbloX The available ROSbloX are continuously expanded. Contact us to propose novel ROSbloX and to obtain existing ROSbloX! Sensors BloX LIS3DH : Based on Adafruit's LIS3DH Triple-Axis Accelerometer BloX LSM6DSOX-LIS3MDL : Based on Adafruit's LSM6DSOX-LIS3MDL 9-DoF IMU BloX Zed Mini : Based on Stereolab's Zed Mini Mixed-Reality Camera BloX Mosaic-X5 : Based on Septentrio's open source GNSS mosaicHAT BloX Livox-Mid-70 : Based on Livox's Mid-70 LiDAR BloX MOCAP4ROS2-Optitrack : Streams motrion tracking data from Optitrack Actuators BloX Joy-Linux : Use a gamepad connected via Bluetooth BloX Dynamixel : Based on Dynamixel SDK to control Dynamixel Servos BloX Lumecube : Allows controlling a Lumecube BloX micro-ROS : Interfaces with microcontrollers via micro-ROS Algorithms BloX Bag Recorder : Record data to ROS bags","title":"The ROSbloX documentation"},{"location":"#rosblox-documentation","text":"ROSbloX are modules to discover the Robot Operating System (ROS). Connect with us on Git: ROSbloX Git Join us on Slack: ROSbloX Workspace Follow us on Twitter: ROSbloX (@xploros) Subscribe to our Youtube channel: ROSbloX Youtube Leave some feedback/ideas/questions: ROSbloX Discussions We greatly appreciate your engagement!","title":"ROSbloX documentation"},{"location":"#about-rosblox","text":"The Robot Operating System (ROS), https://www.ros.org/ , is rapidly becoming a de facto standard for writing interoperable and reusable robot software. The interoperability and reusability of ROS software come at the price of an increased software complexity. Getting started with ROS is complex, especially for developers with no backgrounds in software engineering. ROSbloX are modules to explore the functionalities of various sensors and actuators and to discover the capabilities of ROS with minimal prior knowledge. Each ROSbloX implements a sensor or an actuator, is equipped with multiple communication interfaces to connect to computers and simple user interfaces, namely a web interface, a python library, and native ROS, to transmit data.","title":"About ROSbloX"},{"location":"#available-rosblox","text":"The available ROSbloX are continuously expanded. Contact us to propose novel ROSbloX and to obtain existing ROSbloX!","title":"Available ROSbloX"},{"location":"#sensors","text":"BloX LIS3DH : Based on Adafruit's LIS3DH Triple-Axis Accelerometer BloX LSM6DSOX-LIS3MDL : Based on Adafruit's LSM6DSOX-LIS3MDL 9-DoF IMU BloX Zed Mini : Based on Stereolab's Zed Mini Mixed-Reality Camera BloX Mosaic-X5 : Based on Septentrio's open source GNSS mosaicHAT BloX Livox-Mid-70 : Based on Livox's Mid-70 LiDAR BloX MOCAP4ROS2-Optitrack : Streams motrion tracking data from Optitrack","title":"Sensors"},{"location":"#actuators","text":"BloX Joy-Linux : Use a gamepad connected via Bluetooth BloX Dynamixel : Based on Dynamixel SDK to control Dynamixel Servos BloX Lumecube : Allows controlling a Lumecube BloX micro-ROS : Interfaces with microcontrollers via micro-ROS","title":"Actuators"},{"location":"#algorithms","text":"BloX Bag Recorder : Record data to ROS bags","title":"Algorithms"},{"location":"background/","text":"Further Reading Changing a ROSbloX network configuration The ROSbloX network interfaces are configured with Netplan . The network configuration file is located in the ROSbloX file system under /etc/netplan/01-net.cfg. Access to ROSbloX ROSblox are open. Login to a ROSbloX via SSH. Username: rock Password: rock Checking connectivity Before receiving data from a ROSbloX, ensure that the ROSbloX is connected by pinging it: ping rosblox.local # Resolves correct IP address automatically Some networks prohibit discovery of ROSbloX by their mDNS name, i.e. it cannot be reached via rosblox.local . In that case a ROSbloX can be reached via its IP address: ping 10.99.11.1 # If connected via USB ping 10.99.1.XXX # If connected via Ethernet (static IP address) More information on how to use the ping command can be found here . If the ROSbloX is not reachable by either of the commands, the network setup does not work properly.","title":"Further Reading"},{"location":"background/#further-reading","text":"","title":"Further Reading"},{"location":"background/#changing-a-rosblox-network-configuration","text":"The ROSbloX network interfaces are configured with Netplan . The network configuration file is located in the ROSbloX file system under /etc/netplan/01-net.cfg.","title":"Changing a ROSbloX network configuration"},{"location":"background/#access-to-rosblox","text":"ROSblox are open. Login to a ROSbloX via SSH. Username: rock Password: rock","title":"Access to ROSbloX"},{"location":"background/#checking-connectivity","text":"Before receiving data from a ROSbloX, ensure that the ROSbloX is connected by pinging it: ping rosblox.local # Resolves correct IP address automatically Some networks prohibit discovery of ROSbloX by their mDNS name, i.e. it cannot be reached via rosblox.local . In that case a ROSbloX can be reached via its IP address: ping 10.99.11.1 # If connected via USB ping 10.99.1.XXX # If connected via Ethernet (static IP address) More information on how to use the ping command can be found here . If the ROSbloX is not reachable by either of the commands, the network setup does not work properly.","title":"Checking connectivity"},{"location":"connection/","text":"Connecting to ROSbloX ROSbloX can be connected to computers which run Windows, MacOS or Linux via USB-C or Ethernet. Note, ROSbloX are plug-and-play and do not require an installation of ROS on a computer. Connecting to ROSbloX via USB The USB port of a ROSbloX is configured to appear to a connecting computer as a network adapter. It runs a DHCP server on the USB interface and automatically assigns an IP address to the connecting computer. When connected via USB, the ROSBloX is accessible via a fixed static IP address, 10.99.11.1 . Connecting to ROSbloX via Ethernet Each ROSbloX's Ethernet interface has two IP addresses linked to it, a static one which is set on the ROSbloX itself and a dynamic one which automatically is configured through DHCP. Dynamic IP Adress (from a DHCP Server) The dynamic IP address of a ROSbloX is assigned to it by a DHCP server in the network. To access a ROSbloX via its dynamic IP address, the IP address has to retrieved from the DHCP server. Static IP Adress Each ROSbloX is configured with a unique, static IP address in the 10.99.1.XXX/24 subnet. To access a ROSbloX via their static IP address, ensure the computer's connected Ethernet interface has a static IP address in the same subnet, e.g. 10.99.1.1/24. See Changing a ROSbloX network configuration , for instructions how to change a ROSbloX network configuration like its static IP address.","title":"Connecting to ROSbloX"},{"location":"connection/#connecting-to-rosblox","text":"ROSbloX can be connected to computers which run Windows, MacOS or Linux via USB-C or Ethernet. Note, ROSbloX are plug-and-play and do not require an installation of ROS on a computer.","title":"Connecting to ROSbloX"},{"location":"connection/#connecting-to-rosblox-via-usb","text":"The USB port of a ROSbloX is configured to appear to a connecting computer as a network adapter. It runs a DHCP server on the USB interface and automatically assigns an IP address to the connecting computer. When connected via USB, the ROSBloX is accessible via a fixed static IP address, 10.99.11.1 .","title":"Connecting to ROSbloX via USB"},{"location":"connection/#connecting-to-rosblox-via-ethernet","text":"Each ROSbloX's Ethernet interface has two IP addresses linked to it, a static one which is set on the ROSbloX itself and a dynamic one which automatically is configured through DHCP.","title":"Connecting to ROSbloX via Ethernet"},{"location":"connection/#dynamic-ip-adress-from-a-dhcp-server","text":"The dynamic IP address of a ROSbloX is assigned to it by a DHCP server in the network. To access a ROSbloX via its dynamic IP address, the IP address has to retrieved from the DHCP server.","title":"Dynamic IP Adress (from a DHCP Server)"},{"location":"connection/#static-ip-adress","text":"Each ROSbloX is configured with a unique, static IP address in the 10.99.1.XXX/24 subnet. To access a ROSbloX via their static IP address, ensure the computer's connected Ethernet interface has a static IP address in the same subnet, e.g. 10.99.1.1/24. See Changing a ROSbloX network configuration , for instructions how to change a ROSbloX network configuration like its static IP address.","title":"Static IP Adress"},{"location":"interface/","text":"Interfacing with ROSbloX Three interfaces are available to transmit data to/from ROSbloX: - A Web interface which allows visualizing and saving data - A Python library which enables real-time data transmission and simple integration in Python scripts without installing ROS - The native ROS2 interfaces Web interface (Foxglove Studio) To open a ROSbloX's web interface, a computer requires the Chrome browser to be installed. After a ROSbloX has started (which can take up to a minute), its web interface is accessible at http://rosblox.local/ in your Chrome browser. The web interface is based on Foxglove Studio . Python library (roslibpy) To transmit data to/from a ROSblox in real-time in Python, the roslibpy: ROS Bridge library can be used. Install the library with pip install roslibpy Afterwards, add the following lines in a Python script to receive data from a ROSbloX in real-time. from __future__ import print_function import roslibpy client = roslibpy.Ros(host='rosblox.local', port=9090) client.run() listener = roslibpy.Topic(client, '/topic', 'std_msgs/Float32') listener.subscribe(lambda message: print(message)) try: while True: pass except KeyboardInterrupt: client.terminate() ROS2 (native) Each ROSbloX is implemented as ROS2 node and can thus be reached via ROS2 native connections, e.g. it shows up when executing ros2 node list ros2 topic list We refer to the official ROS documentation to get started with ROS.","title":"Interfacing with ROSbloX"},{"location":"interface/#interfacing-with-rosblox","text":"Three interfaces are available to transmit data to/from ROSbloX: - A Web interface which allows visualizing and saving data - A Python library which enables real-time data transmission and simple integration in Python scripts without installing ROS - The native ROS2 interfaces","title":"Interfacing with ROSbloX"},{"location":"interface/#web-interface-foxglove-studio","text":"To open a ROSbloX's web interface, a computer requires the Chrome browser to be installed. After a ROSbloX has started (which can take up to a minute), its web interface is accessible at http://rosblox.local/ in your Chrome browser. The web interface is based on Foxglove Studio .","title":"Web interface (Foxglove Studio)"},{"location":"interface/#python-library-roslibpy","text":"To transmit data to/from a ROSblox in real-time in Python, the roslibpy: ROS Bridge library can be used. Install the library with pip install roslibpy Afterwards, add the following lines in a Python script to receive data from a ROSbloX in real-time. from __future__ import print_function import roslibpy client = roslibpy.Ros(host='rosblox.local', port=9090) client.run() listener = roslibpy.Topic(client, '/topic', 'std_msgs/Float32') listener.subscribe(lambda message: print(message)) try: while True: pass except KeyboardInterrupt: client.terminate()","title":"Python library (roslibpy)"},{"location":"interface/#ros2-native","text":"Each ROSbloX is implemented as ROS2 node and can thus be reached via ROS2 native connections, e.g. it shows up when executing ros2 node list ros2 topic list We refer to the official ROS documentation to get started with ROS.","title":"ROS2 (native)"}]}